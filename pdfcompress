#!/bin/bash

#########################################################################################

# compress a PDF file using ghostview (gv) from level 1 (max/small) to level 5 (min/big)

# (c) Toby Breckon, Durham University, 2025
# License: http://www.gnu.org/licenses/gpl.txt

#########################################################################################

PDF_COMPATIBILITY_LEVEL=1.4

#########################################################################################

# get command name from command call

COMMAND_NAME=`basename $0`

#########################################################################################

# check number of arguments

if [ "$#" -ne 3 ]; then
  compression="error"
else
  compression=$1
fi

#########################################################################################

# check ghostview (gv) is available

NEEDED_COMMAND="gv"
NEEDED_LONGNAME="ghostview"
NEEDED_PACKAGE="gv"
if ! command -v $NEEDED_COMMAND >/dev/null 2>&1; then
  echo "$COMMAND_NAME ERROR: required $NEEDED_LONGNAME package (package name: $NEEDED_PACKAGE) NOT installed."
  echo
  exit 1
fi

#########################################################################################

# check for file overwrite as a safeguard

FILE_TO_CHECK=$3
if [ -e "$FILE_TO_CHECK" ]; then
  echo "Output file '$FILE_TO_CHECK' already exists."
  read -p "Do you want to overwrite it? (y/n): " overwrite
  case "$overwrite" in
    y|Y)
      echo "Overwriting $FILE_TO_CHECK..."
      ;;
    *)
      echo "Aborting. File '$FILE_TO_CHECK' was not overwritten."
      exit 1
      ;;
  esac
fi

#########################################################################################

# perform compression from level 1 (smallest file, max compression)
# to 5 (largest file, minimum/default compression)

case "$compression" in
  small|1|screen)
   
    # /screen selects low-resolution output similar to the 
    # Acrobat Distiller (up to version X) "Screen Optimized" setting.
   
    gs -sDEVICE=pdfwrite -dCompatibilityLevel=$PDF_COMPATIBILITY_LEVEL \
    -dPDFSETTINGS=/screen \
    -dNOPAUSE -dQUIET -dBATCH -sOutputFile=$3 $2
   
    ;;
  medium|2|ebook)

    # /ebook selects medium-resolution output similar to the 
    # Acrobat Distiller (up to version X) "eBook" setting.

     gs -sDEVICE=pdfwrite -dCompatibilityLevel=$PDF_COMPATIBILITY_LEVEL \
    -dPDFSETTINGS=/ebook \
    -dNOPAUSE -dQUIET -dBATCH -sOutputFile=$3 $2

    ;;
  large|3|printer)

    # /printer selects output similar to the Acrobat Distiller 
    # "Print Optimized" (up to version X) setting.

    gs -sDEVICE=pdfwrite -dCompatibilityLevel=$PDF_COMPATIBILITY_LEVEL \
    -dPDFSETTINGS=/printer \
    -dNOPAUSE -dQUIET -dBATCH -sOutputFile=$3 $2
   
    ;;
  larger|4|prepress)

    # /prepress selects output similar to Acrobat Distiller 
    # "Prepress Optimized" (up to version X) setting.
    
    gs -sDEVICE=pdfwrite -dCompatibilityLevel=$PDF_COMPATIBILITY_LEVEL \
    -dPDFSETTINGS=/prepress \
    -dNOPAUSE -dQUIET -dBATCH -sOutputFile=$3 $2

    ;;

  largest|5|default)

    # /default selects output intended to be useful across a 
    # wide variety of uses, possibly at the expense of a larger output file.

    gs -sDEVICE=pdfwrite -dCompatibilityLevel=$PDF_COMPATIBILITY_LEVEL \
    -dPDFSETTINGS=/default \
    -dNOPAUSE -dQUIET -dBATCH -sOutputFile=$3 $2
    ;;
  error|*)
    echo
    echo "Usage: $COMMAND_NAME {1-5} input.pdf output.pdf"
    echo "Usage: $COMMAND_NAME {small|medium|large|larger|largest} ..."
    echo "Usage: $COMMAND_NAME {screen|ebook|printer|prepress|default} ..."
    echo
    echo "Compress PDF file from level 1 (max, smallest file) to 5 (min, largest file)"
    echo 
    exit 1
  
    ;;
esac

#########################################################################################