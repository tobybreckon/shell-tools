################################################################################

# A Makefile script for iterating through zipped assignments from DUO (blackboard)
# for software testing in a reset working environment for each one
#
# use:
# - define working directory e.g. /tmp/marking-this-year
# - reset clean + setup build items below to work with your data locations
# - reset clean to work with location of this Makefile (last line!)

# Toby Breckon, Durham University, UK - January 2018

################################################################################

# define location where all the zip'd submissions are downloaded to
# (1 per student, already unzipped from the large multi-student zips from DUO)

PATH_TO_MARK=/tmp/marking-2019-20/l3-comp-vis-2019-marking/to_mark/

# define location where all the zip'd submissions are moved to when marked

PATH_MARKED=/tmp/marking-2019-20/l3-comp-vis-2019-marking/marked/

# define a working directory

PATH_WORKING=/tmp/marking-2019-20/working

# define datasets needed for testing

# DATASETS_REQUIRED=/tmp/OH-sfm-test-sequence-DURHAM-2015-03-27-calibrated \
#									/tmp/OH-sfm-test-sequence-DURHAM-2015-03-27-uncalibrated \
#									/tmp/l4-test-cal /tmp/l4-test-uncal

DATASETS_REQUIRED=/tmp/TTBB-durham-02-10-17-sub10 /tmp/l3-test

# define module name as used by DUO with spaces replaced by "-"

DUO_MODULE_NAME = Computer-Vision

################################################################################

status: left
	@ echo working directory: $(PATH_WORKING)
	@ echo assignments \"to mark\" directory: $(PATH_TO_MARK)
	@ echo assignments \"marked\" directory: $(PATH_MARKED)

################################################################################

# reset the working environment

# explicitly change dir, for safety
# data to be available for software testing
# location of this Makefile

clean:

	cd $(PATH_WORKING)

	rm -rf * .[a-zA-Z]*

	@ ln -s $(DATASETS_REQUIRED) .

	@ ln -s ~/mobile/shell-tools/Makefile.marking Makefile

################################################################################

# protect against code than may rewrite the input files + create dirs

setup:
	@ chmod -R -w $(DATASETS_REQUIRED)
	@ mkdir -p $(PATH_TO_MARK) $(PATH_MARKED)


################################################################################

# how much more to do!

todo:	left

left:
	@ echo -n "Currently there are "
	@ (ls -l $(PATH_TO_MARK)/*txt | wc -l | tr -d "\n") 2>/dev/null
	@ echo " assignments left to mark! (including current one)"

################################################################################

# get next one to mark to "to mark" set

next:
	@ echo Next from: $(PATH_TO_MARK)
	@ echo File: `ls $(PATH_TO_MARK) | grep zip$ | head -1`
	unzip $(PATH_TO_MARK)/"`ls $(PATH_TO_MARK) | grep zip$ | head -1`"
	@ echo `ls $(PATH_TO_MARK) | grep txt$ | head -1 | cut -d"_" -f2` > .current_id

# also handle people who fail to grasp the concept of zip

nextnozip:
	@ echo Next from: $(PATH_TO_MARK)
	@ echo File set with submission: `ls $(PATH_TO_MARK) | grep txt$ | head -1`
	cp -r $(PATH_TO_MARK)/*`ls $(PATH_TO_MARK) | grep txt$ | head -1 | cut -d"_" -f2`* .

################################################################################

# print ID of current student being marked in working directory

student: current
id: current

current:
	@ cd $(PATH_WORKING)
	@ echo -n "Current student being marked is: "
	@ (test -e .current_id && cat .current_id | tr A-Z a-z) || echo "<NONE IN WORKING DIRECTORY>"

################################################################################

# move this one to the "marked" set

marked:
	@ echo Moving last marked from: $(PATH_TO_MARK) to $(PATH_MARKED)
	@ echo
	@ mv -v $(PATH_TO_MARK)/*`ls $(PATH_TO_MARK) | grep txt$ | head -1 | cut -d"_" -f2`* $(PATH_MARKED)
	@ echo

# also handle people who fail to grasp the concept of zip

# markednozip:
#	@ echo Moving last marked from: $(PATH_TO_MARK) to $(PATH_MARKED)
#	@ echo
#	@ mv -v $(PATH_TO_MARK)/*`ls $(PATH_TO_MARK) | grep txt$ | head -1 | cut -d"_" -f2`* $(PATH_MARKED)
#	@ echo

################################################################################

# remove spaces within the submission filenames and replace with "-"
# as these otherwise screw up the other operations

nospaces:
	@ cd $(PATH_TO_MARK); pwd; for i in `find . -name '* *' | tr ' ' '~'`; do mv "`echo $$i| sed s/'~'/' '/g`" `echo $$i | tr '~' '-'`; done

################################################################################

# create txt submission records for those which do not have one as otherwise
# this screws up the other operations + also prefix all the zip files with the DUO name
# (hence forcing consist ordering for ls *txt records and ls *zip submissions)

fixtomark:
	@ cd $(PATH_TO_MARK); for i in `ls | grep -v "attempt_" | sed s/\.zip/_attempt_altrecord\.txt/g`; do touch $(DUO_MODULE_NAME)_$$i; done
	@ cd $(PATH_TO_MARK); for i in `ls *zip | grep -v "$(DUO_MODULE_NAME)_"`; do mv $$i $(DUO_MODULE_NAME)_$$i; done

################################################################################

# check for obvious duplicate submissions in the set of submissons by student ID
# N.B. need to run nospaces and txt make targets first

duplicates:
	@ cd $(PATH_TO_MARK); ls *txt | cut -d"_" -f2 | sort | uniq -d

################################################################################

# produce list of submissons by student ID in order they were marked
# N.B. need to run nospaces and txt make targets first

list:
	@ ls $(PATH_MARKED) | grep txt$ | cut -d"_" -f2 > $(PATH_WORKING)/marking_order.txt
	@ echo "List copied to: " $(PATH_WORKING)/marking_order.txt

################################################################################

# split any PDF file present in the working directory into individual pages
# N.B. make symlink to master PDF file of all student marks into working dir first

burstpdf:
	@ cd $(PATH_WORKING); pdftk *.pdf burst; rm -f doc_data.txt

################################################################################

# name each PDF file present in the current directory resulting from a pdftk
# burst operation (see taregt 1 above) by each line in the list of ordered
# student marks (see target 2 above)

namepdf:
	@ cd $(PATH_WORKING); files=( pg_*.pdf ); i=0; while read -r new_name; do mv -v "$${files[$$i]}" "$$new_name".pdf; ((i++)); done < marking_order.txt

################################################################################

# check each PDF file named via the above namepdf target has been named correctly
# by prining each student ID from the marking order list and displaying the PDF file

checknamepdf:
	@ cd $(PATH_WORKING); while read -r studentid; do echo STUDENT ID: "$$studentid"; echo; okular $$studentid.pdf; done < marking_order.txt

################################################################################
